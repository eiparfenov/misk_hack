// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using WebApi;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251016054529_AddVector")]
    partial class AddVector
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Embeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Vector>("Vector")
                        .IsRequired()
                        .HasColumnType("vector(1024)")
                        .HasColumnName("vector");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_embeding");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_embeding_question_id");

                    b.ToTable("embeding", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("audience");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("example");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("sub_category_id");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_question_sub_category_id");

                    b.ToTable("question", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_sub_category");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_sub_category_category_id");

                    b.ToTable("sub_category", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Embeding", b =>
                {
                    b.HasOne("WebApi.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_embeding_question_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebApi.Models.Question", b =>
                {
                    b.HasOne("WebApi.Models.SubCategory", "SubCategory")
                        .WithMany("Questions")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_sub_category_sub_category_id");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("WebApi.Models.SubCategory", b =>
                {
                    b.HasOne("WebApi.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sub_category_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApi.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("WebApi.Models.SubCategory", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
